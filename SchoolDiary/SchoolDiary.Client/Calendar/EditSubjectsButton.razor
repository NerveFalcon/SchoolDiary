@using System.ComponentModel.DataAnnotations
@using SchoolDiary.Lessons.Models
@inject SubjectManager SubjectManager
@inject ILogger<EditSubjectsButton> Logger


<ButtonWithModal Class="btn-outline-dark align-self-center"
                 ModalCssClass="modal-lg" ModalTitle="Изменение предметов"
                 Model="Subjects" OnValidSubmit="OnSubmit">
	<ButtonContent>Изменить предметы</ButtonContent>
	<Body>
	<div class="d-flex flex-column gap-2">
		@foreach (var subject in Subjects.Where(vm => !vm.IsDeleted))
		{
			<div class="d-flex justify-content-between">
				<div class="d-flex flex-column w-50">
					<input @bind="@subject.Title" class="form-control"
					       id="@(subject.Title).@(nameof(subject.Title))" type="text"/>
					<span class="text-danger">
						@((MarkupString)string.Join("<br>", context.EditContext.GetValidationMessages(context.EditContext.Field($"{subject.Title}.{nameof(subject.Title)}"))))
					</span>
				</div>

				<div class="d-flex gap-2 align-items-center">
					<input @bind="@subject.Opacity" @bind:event="oninput"
					       class="form-range" max="1" min="0"
					       id="@(subject.Title).@(nameof(subject.Opacity))"
					       step="0.1" type="range">
					<input @bind="@subject.Color" class="form-control form-control-color"
					       id="@(subject.Title).@(nameof(subject.Color))"
					       style="opacity: @subject.Opacity" title="@subject.Color" type="color"/>
					<div class="btn btn-close" @onclick="() => Delete(subject)"></div>
				</div>
			</div>
		}
		<div class="btn btn-dark" @onclick="AddSubject">+</div>
	</div>
	</Body>
	<Footer>
		<button type="button" class="btn btn-warning" @onclick="() => Reset(context)">Сбросить</button>
		<button type="button" class="btn btn-secondary" @onclick="context.Closer.Invoke">Отмена</button>
		<button type="submit" class="btn btn-primary" disabled="@(!HasChanges)">Сохранить</button>
	</Footer>
</ButtonWithModal>

@code {
	[Parameter] public EventCallback OnSuccess { get; set; }

	List<ViewModel> Subjects { get; set; } = [];
	bool HasChanges => Subjects.Any(vm => vm.HasChanges());

	protected override void OnInitialized() => Subjects = SubjectManager.GetSubjects().Select(s => new ViewModel(s)).ToList();

	private void AddSubject() => Subjects.Add(new());

	private async Task OnSubmit(ModalForm.ModalFormContext context)
	{
		if (!context.EditContext.Validate()) return;

		var msgs = new ValidationMessageStore(context.EditContext);
		foreach (var subject in Subjects.Where(subject => string.IsNullOrWhiteSpace(subject.Title)))
		{
			var field = context.EditContext.Field($"{subject.Title}.{nameof(subject.Title)}");
			msgs.Add(field, "Название должно содержать не менее 3 букв");
		}

		if (!context.EditContext.GetValidationMessages().Any())
			await OnValidSubmit(context);
	}

	private async Task OnValidSubmit(ModalForm.ModalFormContext context)
	{
		foreach (var vm in Subjects)
		{
			if (vm.IsDeleted)
			{
				SubjectManager.RemoveSubject(vm.Def);
				continue;
			}

			var rgb = vm.GetRgb();
			if (vm.IsNew)
			{
				SubjectManager.AddSubject(new(vm.Title, rgb));
				continue;
			}

			if (rgb != vm.Def.Color)
				SubjectManager.EditSubjectColor(vm.Def, rgb);

			if (vm.Title != vm.Def.Title)
				SubjectManager.EditSubjectTitle(vm.Def, vm.Title);
		}

		await context.Closer.Invoke();
		await OnSuccess.InvokeAsync();
	}

	private void Reset(ModalForm.ModalFormContext context)
	{
		foreach (var viewModel in Subjects.ToList())
		{
			viewModel.Reset();
			if (string.IsNullOrWhiteSpace(viewModel.Title))
				Subjects.Remove(viewModel);
		}
	}

	private void Delete(ViewModel subject)
	{
		subject.IsDeleted = true;
		if (subject.IsNew)
			Subjects.Remove(subject);
	}

	class ViewModel(SubjectModel def)
	{
		public SubjectModel Def { get; set; } = def;

		public ViewModel() : this(new("", ColorManager.HexToRgba("#fff")))
		{
		}

		[MinLength(3)] public string Title { get; set; } = def.Title;
		public string Color { get; set; } = ColorManager.RgbaToHex(def.Color)[..^2];
		public string Opacity { get; set; } = def.Color.Split(',').Last();
		public bool IsDeleted { get; set; } = false;
		public bool IsNew => string.IsNullOrWhiteSpace(Def.Title);

		public void Reset()
		{
			Title = Def.Title;
			Color = ColorManager.RgbaToHex(Def.Color)[..^2];
			Opacity = Def.Color.Split(',').Last();
			IsDeleted = false;
		}

		public bool HasChanges()
			=> string.IsNullOrWhiteSpace(Def.Title)
			   || Title != Def.Title
			   || GetRgb() != Def.Color;

		public SubjectModel GetModel() => new(Title, GetRgb());

		public string GetRgb() => ColorManager.HexToRgba(Color, Opacity);
	}

}