@page "/"
@using Calendar.Models
@using SchoolDiary.Lessons.Models
@rendermode InteractiveServer

@inject CalendarService Calendar
@inject HomeWorkService HomeWorkService

<PageTitle>Календарь</PageTitle>

<h1>Календарь заданий</h1>
<div class="d-flex gap-4">
	<div class="calendar flex-fill">
		@foreach (var day in Days)
		{
			<DayView Day="day" @bind-Selected="Selected">
				<Additional>
					@if (day.DayOfWeek < DayOfWeekRu.Saturday)
					{
						<EditScheduleButton Day="day" OnSuccess="Init"/>
					}
				</Additional>
			</DayView>
		}
	</div>

	<aside class="w-25 d-flex flex-column">
		<div class="bg-cream bg-opacity-25 p-4 rounded rounded-2">
			<p><b>Задания на @(Selected.Day.ToString("00")).@Selected.Month</b></p>
			<div class="d-flex flex-column gap-2">
				@foreach (var work in Selected.HomeWorks)
				{
					<div style="background-color: rgba(@work.Subject.Color);"
					     class="flex-fill p-2 rounded rounded-1 position-relative">
						<div class="position-absolute btn btn-close" style="right: 5%;"
						     @onclick="() => RemoveHomeWork(work)"></div>
						<p class="me-5">@work.Subject.Title</p>
						<p>@work.Exercise</p>
					</div>
				}
				<AddHomeWorkButton Day="Selected" ReRender="() => ShouldRender()"/>
			</div>
		</div>
	</aside>
</div>

@code {
	DayModel Selected { get; set; } = null!;
	List<DayModel> Days { get; set; } = [];

	protected override Task OnInitializedAsync()
	{
		Init();
		return base.OnInitializedAsync();
	}

	private void Init()
	{
		Days = Calendar.GetCurrent().ToList();
		var day = Selected?.Day ?? DateTime.Today.Day;
		Selected = Days[day - 1];
		ShouldRender();
	}

	private void RemoveHomeWork(HomeWorkModel work)
	{
		if (HomeWorkService.Remove(work))
			Selected.HomeWorks.Remove(work);
	}

}
